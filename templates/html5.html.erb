<!DOCTYPE html>
<!-- 
  Copyright 2010 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  Original slides: Marcin Wichary (mwichary@google.com)
  Modifications: Chrome DevRel Team (chrome-devrel@googlegroups.com)
                 Alex Russell (slightlyoff@chromium.org)
                 Brad Neuberg
-->

<!-- modifications for s9 template:
 
  removed offline manifest
  removed disclaimer; it's just a prototype anyway
  removed google analytics script code
  removed all slides
  changed default list-style from none to square
  
-->

<!-- 

  modified by Laurent Vallar (val@zbla.net)

  added http://code.google.com/p/google-code-prettify/ support:
   added prettify-small-21-Jul-2010.zip content from project download page
   added header for prettify cascading style sheet
   added prettify base script at the bottom, plus some optional language support
   removed pre.prettyprint css class (breaking themes)

  added toggle-{counter,size,transitions,gradiens,prettify} and cleanup some CSS
   properties like studio.html5rocks.com/samples/slides/index.html

-->

<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=Edge;chrome=1" />
    <meta name="<%= headers['author'] %>" content ="Author">

    <title><%= headers['title'] %></title>
    <!-- <link href='http://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans+Mono'rel='stylesheet' type='text/css'>  -->
    
    <link id="prettify-link" href="prettify/prettify.css" rel="stylesheet" disabled />
    
    <link href="css/moon.css" class="theme" rel="stylesheet" />
    <link href="css/sand.css" class="theme" rel="stylesheet" />
    <link href="css/sea_wave.css" class="theme" rel="stylesheet" />
    <link href="css/default.css" class="theme" rel="stylesheet" media="screen"
    />
  <style>
    div:not(.current).reduced {
      -webkit-transform: scale(0.8);
      -moz-transform: scale(0.8);
      -o-transform: scale(0.8);
      transform: scale(0.8);
    } 
    .no-transitions {
      -webkit-transition: none;
      -moz-transition: none;
      -o-transition: none;
      transition: none;
    }
    .no-gradients {
      background: none;
      background-color: #fff;
    }
    section div.notes:before {
      display: block;
      content: 'Notes';
      font-weight: bold;
      font-size: 150%;
      color: brown;
      text-shadow: black -2px 1px 1px;
    }
    section div.notes:after {
      content: '';
    }
    section div.notes {
      visibility: hidden;
      display: none;
      background-color: Khaki;
      -webkit-border-radius: 6px;
      -khtml-border-radius: 6px;
      -moz-border-radius: 6px;
      border-radius: 6px;
      border: 2px solid black;
      opacity: 0.90;
      filter:alpha(opacity=80);
      position: absolute;
      z-index: 9001;
      top: 5%;
      left: 2%;
      width: 88%;
      /* height: 86%; */
      margin: 2%;
      padding: 2%;
      font-size: 120%;
    }
    .notes h1 {
      font-weight: bold;
      font-size: 140%;
      color: brown;
      text-shadow: black -2px 1px 1px;
    }
    <% transitions.each do |transition, img| %>
    .<%= transition %> .counter:after {
       background-image: url(<%= img %>);
       background-size: 2.5em;
    }
    <% end %>
  </style>
  </head>
  <body>
    <div class="presentation">
      <div id="presentation-counter">Loading...</div>
      <div class="slides">
        <div class="slide" id="landing-slide">
          <style>
            #landing-slide p {
              font-size: 35px;
            }
            p#disclaimer-message {
              font-size: 20px;
            }
          </style>
          <section class="middle">
            <p>This presentation is an HTML5 website</p>
            <p>
              Press <span id="left-init-key" class="key">&rarr;</span> key to
              advance.
            </p>
            <p id="disclaimer-message">
              Having issues seeing the presentation? Read the
              <a href="disclaimer.html">disclaimer</a>
            </p>
          </section>
        </div>

      <div class="slide" id="controls-slide">
        <style>
          #controls-slide li, #controls-slide p {
            font-size: 130%;
          }
        </style>
        <header>Slides controls</header>
        <section>
          <ul>
            <li>
              <span class="key">&larr;</span>
              <span class="key">&darr;</span>
              <span class="key">PgUp</span>
              /
              <span class="key">space</span>
              <span class="key">&rarr;</span>
              <span class="key">&uarr;</span>
              <span class="key">PgDown</span>,<br />
              mouse scroll wheel up/down or touch gestures left/right to switch
              between slides.
            </li>
            <li><span class="key">Ctrl/Command</span>
              <span class="key">+</span>/<span class="key">-</span> to zoom
              in and out if slides donâ€™t fit.</li>
            <li><span class="key">T</span> to change the theme.</li>
            <li><span class="key">H</span> or <span class="key">B</span> to
                toggle syntax highlight.</li>
            <li><span class="key">N</span> to show notes.</li>
            <li><span class="key">D</span>to switch in/out simple effect.</li>
          </ul>
          <br />
          <p><em>Options</em>:
            <input type="checkbox" id="toggle-size" />
              <label for="toggle-size"><span>Grow (Basic)</span></label>
            <input type="checkbox" id="toggle-transitions" checked />
              <label for="toggle-transitions"><span>Transitions</span></label>
            <input type="checkbox" id="toggle-gradients" checked />
              <label for="toggle-gradients"><span>Gradients</span></label>
            <input type="checkbox" id="toggle-counter" checked />
              <label for="toggle-counter"><span>Slide numbers</span></label>
          </p>
        </section>
      </div>
      
      <div class="slide" id="title-slide">
        <style>
          #title-slide h1, #title-slide h2 {
            color: black;
          }
          #title-slide h1 {
            letter-spacing: -2px;
            font-size: 96px;
          }
          #title-slide h2 {
            margin-top: -5px;
            font-size: 40px;
            letter-spacing: -1px;
          }
        </style>
        <section class="middle">
          <hgroup>
            <h1>
              <%= headers['title'] %>
            </h1>
            <h2>
              <%= headers['subtitle'] %>
            </h2>
          </hgroup>
          <p><em><%= headers['abstract'] %></em></p>
        </section>
      </div>

      <% @slides.each do |slide| %>
        <%= slide.to_google_html5 %>
      <% end %>

    </div> <!-- slides -->
       
  </div> <!-- presentation -->
    
    <script defer>
      (function() {
        var doc = document;
        var disableBuilds = false;
        
        var ctr = 0;
        var spaces = /\s+/, a1 = [''];

        var toArray = function(list) {
          return Array.prototype.slice.call(list || [], 0);
        };

        var byId = function(id) {
          if (typeof id == 'string') { return doc.getElementById(id); }
          return id;
        };
        
        var query = function(query, root) {
          return queryAll(query, root)[0];
        }
        
        var queryAll = function(query, root) {
          if (!query) { return []; }
          if (typeof query != 'string') { return toArray(query); }
          if (typeof root == 'string') {
            root = byId(root);
            if(!root){ return []; }
          }

          root = root || document;
          var rootIsDoc = (root.nodeType == 9);
          var doc = rootIsDoc ? root : (root.ownerDocument || document);

          // rewrite the query to be ID rooted
          if (!rootIsDoc || ('>~+'.indexOf(query.charAt(0)) >= 0)) {
            root.id = root.id || ('qUnique' + (ctr++));
            query = '#' + root.id + ' ' + query;
          }
          // don't choke on something like ".yada.yada >"
          if ('>~+'.indexOf(query.slice(-1)) >= 0) { query += ' *'; }
          return toArray(doc.querySelectorAll(query));
        };

        var strToArray = function(s) {
          if (typeof s == 'string' || s instanceof String) {
            if (s.indexOf(' ') < 0) {
              a1[0] = s;
              return a1;
            } else {
              return s.split(spaces);
            }
          }
          return s;
        };

        // Needed for browsers that don't support String.trim() (e.g. iPad)
        var trim = function(str) {
          return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
        };

        var addClass = function(node, classStr) {
          classStr = strToArray(classStr);
          var cls = ' ' + node.className + ' ';
          for (var i = 0, len = classStr.length, c; i < len; ++i) {
            c = classStr[i];
            if (c && cls.indexOf(' ' + c + ' ') < 0) {
              cls += c + ' ';
            }
          }
          node.className = trim(cls);
        };

        var removeClass = function(node, classStr) {
          var cls;
          if (classStr !== undefined) {
            classStr = strToArray(classStr);
            cls = ' ' + node.className + ' ';
            for (var i = 0, len = classStr.length; i < len; ++i) {
              cls = cls.replace(' ' + classStr[i] + ' ', ' ');
            }
            cls = trim(cls);
          } else {
            cls = '';
          }
          if (node.className != cls) {
            node.className = cls;
          }
        };

        var toggleClass = function(node, classStr) {
          var cls = ' ' + node.className + ' ';
          if (cls.indexOf(' ' + trim(classStr) + ' ') >= 0) {
            removeClass(node, classStr);
          } else {
            addClass(node, classStr);
          }
        };

        var ua = navigator.userAgent;
        var isFF = parseFloat(ua.split('Firefox/')[1]) || undefined;
        var isWK = parseFloat(ua.split('WebKit/')[1]) || undefined;
        var isOpera = parseFloat(ua.split('Opera/')[1]) || undefined;

        var canTransition = (function() {
          var ver = parseFloat(ua.split('Version/')[1]) || undefined;
          // test to determine if this browser can handle CSS transitions.
          var cachedCanTransition = 
            (isWK || (isFF && isFF > 3.6 ) || (isOpera && ver >= 10.5));
          return function() { return cachedCanTransition; }
        })();

        //
        // Slide class
        //
        var Slide = function(node, idx) {
          this._node = node;
          if (idx >= 0) {
            this._count = idx + 1;
          }
          if (this._node) {
            addClass(this._node, 'slide distant-slide');
          }
          this._makeCounter();
          this._makeBuildList();
        };

        Slide.prototype = {
          _node: null,
          _count: 0,
          _buildList: [],
          _visited: false,
          _currentState: '',
          _states: [ 'distant-slide', 'far-past',
                     'past', 'current', 'future',
                     'far-future', 'distant-slide' ],
          setState: function(state) {
            if (typeof state != 'string') {
              state = this._states[state];
            }
            if (state == 'current' && !this._visited) {
              this._visited = true;
              this._makeBuildList();
            }
            removeClass(this._node, this._states);
            addClass(this._node, state);
            this._currentState = state;

            // delay first auto run. Really wish this were in CSS.
            /*
            this._runAutos();
            */
            var _t = this;
            setTimeout(function(){ _t._runAutos(); } , 400);

            if (state == 'current') {
              this._onLoad();
            } else {
              this._onUnload();
            }
          },
          _onLoad: function() {
            this._fireEvent('onload');
            this._showFrames();
          },
          _onUnload: function() {
            this._fireEvent('onunload');
            this._hideFrames();
          },
          _fireEvent: function(name) {
            var eventSrc = this._node.getAttribute(name);
            if (eventSrc) {
              eventSrc = '(function() { ' + eventSrc + ' })';
              var fn = eval(eventSrc);
              fn.call(this._node);
            }
          },
          _showFrames: function() {
            var frames = queryAll('iframe', this._node);
            function show() {
              frames.forEach(function(el) {
                var _src = el.getAttribute('_src');
                if (_src && _src.length) {
                  el.src = _src;
                }
              });
            }
            setTimeout(show, 0);
          },
          _hideFrames: function() {
            var frames = queryAll('iframe', this._node);
            function hide() {
              frames.forEach(function(el) {
                var _src = el.getAttribute('_src');
                if (_src && _src.length) {
                  el.src = '';
                }
              });
            }
            setTimeout(hide, 250);
          },
          _makeCounter: function() {
            if(!this._count || !this._node) { return; }
            var c = doc.createElement('span');
            c.textContent = this._count;
            c.className = 'counter';
            this._node.appendChild(c);
          },
          _makeBuildList: function() {
            this._buildList = [];
            if (disableBuilds) { return; }
            if (this._node) {
              this._buildList = queryAll('[data-build] > *', this._node);
            }
            this._buildList.forEach(function(el) {
              addClass(el, 'to-build');
            });
          },
          _runAutos: function() {
            if (this._currentState != 'current') {
              return;
            }
            // find the next auto, slice it out of the list, and run it
            var idx = -1;
            this._buildList.some(function(n, i) {
              if (n.hasAttribute('data-auto')) {
                idx = i;
                return true;
              }
              return false;
            });
            if (idx >= 0) {
              var elem = this._buildList.splice(idx, 1)[0];
              var transitionEnd = isWK ? 'webkitTransitionEnd' : (isFF ? 'mozTransitionEnd' : 'oTransitionEnd');
              var _t = this;
              if (canTransition()) {
                var l = function(evt) {
                  elem.parentNode.removeEventListener(transitionEnd, l, false);
                  _t._runAutos();
                };
                elem.parentNode.addEventListener(transitionEnd, l, false);
                removeClass(elem, 'to-build');
              } else {
                setTimeout(function() {
                  removeClass(elem, 'to-build');
                  _t._runAutos();
                }, 400);
              }
            }
          },
          buildNext: function() {
            if (!this._buildList.length) {
              return false;
            }
            removeClass(this._buildList.shift(), 'to-build');
            return true;
          },
        };

        //
        // SlideShow class
        //
        var SlideShow = function(slides) {
          this._slides = (slides || []).map(function(el, idx) {
            return new Slide(el, idx);
          });
          var h = window.location.hash;
          try {
            this.current = h;
          } catch (e) { /* squeltch */ }
          this.current = (!this.current) ? "landing-slide" : this.current.replace('#', '');
          if (!query('#' + this.current)) {
            // if this happens is very likely that someone is coming from
            // a link with the old permalink format, i.e. #slide24
            alert('The format of the permalinks have recently changed. If you are coming ' +
                   'here from an old external link it\'s very likely you will land to the wrong slide');
            this.current = "landing-slide";
          }
          var _t = this;
          doc.addEventListener('keydown', 
              function(e) { _t.handleKeys(e); }, false);
          doc.addEventListener('touchstart', 
              function(e) { _t.handleTouchStart(e); }, false);
          doc.addEventListener('touchend', 
              function(e) { _t.handleTouchEnd(e); }, false);
          window.addEventListener('popstate', 
              function(e) { if (e.state) { _t.go(e.state); } }, false);
          query('#left-init-key').addEventListener('click',
              function() { _t.next(); }, false);
          this._update();
        };

        SlideShow.prototype = {
          _presentationCounter: query('#presentation-counter'),
          _slides: [],
          _getCurrentIndex: function() {
            var me = this;
            var slideCount = null;
            queryAll('.slide').forEach(function(slide, i) {
              if (slide.id == me.current) {
                slideCount = i;
              }
            });
            return slideCount + 1;  
          },
          _update: function(dontPush) {
            // in order to delay the time where the counter shows the slide number we check if 
            // the slides are already loaded (so we show the loading... instead)
            // the technique to test visibility is taken from here
            // http://stackoverflow.com/questions/704758/how-to-check-if-an-element-is-really-visible-with-javascript
            var docElem = document.documentElement;
            var elem = document.elementFromPoint( docElem.clientWidth / 2, docElem.clientHeight / 2);
            var currentIndex = this._getCurrentIndex();
            if (elem && elem.className != 'presentation') {
                this._presentationCounter.textContent = currentIndex;
            }
            if (history.pushState) {
              if (!dontPush) {
                history.replaceState(this.current, 'Slide ' + this.current, '#' + this.current);
              }
            } else {
              window.location.hash = this.current;
            }
            for (var x = currentIndex-1; x < currentIndex + 7; x++) {
              if (this._slides[x-4]) {
                this._slides[x-4].setState(Math.max(0, x-currentIndex));
              }
            }
          },

          current: 0,
          next: function() {
            if (!this._slides[this._getCurrentIndex() - 1].buildNext()) {
              var next = query('#' + this.current + ' + .slide');
              this.current = (next) ? next.id : this.current;
              this._update();
            }
          },
          prev: function() {
            var prev = query('.slide:nth-child(' + (this._getCurrentIndex() - 1) + ')');
            this.current = (prev) ? prev.id : this.current;
            this._update();
          },
          go: function(slideId) {
            this.current = slideId;
            this._update(true);
          },

          _notesOn: false,
          showNotes: function() {
            var isOn = this._notesOn = !this._notesOn;
            queryAll('.notes').forEach(function(el) {
              el.style.display = (isOn) ? 'block' : 'none';
              el.style.visibility = (isOn) ? 'visible' : 'hidden';
            });
          },
          switch3D: function() {
            toggleClass(document.body, 'three-d');
          },
          toggleHightlight: function() {
            var link = query('#prettify-link');
            link.disabled = !(link.disabled);
            sessionStorage['highlightOn'] = !link.disabled;
          },
          changeTheme: function() {
            var linkEls = queryAll('link.theme');
            var sheetIndex = 0;
            linkEls.forEach(function(stylesheet, i) {
              if (!stylesheet.disabled) {
                sheetIndex = i;
              }
            });
            linkEls[sheetIndex].disabled = true;
            linkEls[(sheetIndex + 1) % linkEls.length].disabled = false;
            sessionStorage['theme'] = linkEls[(sheetIndex + 1) % linkEls.length].href;
          },
          handleKeys: function(e) {
            
            if (/^(input|textarea)$/i.test(e.target.nodeName) || e.target.isContentEditable) {
              return;
            }
            
            switch (e.keyCode) {
              case 33: // page up
              case 37: // left arrow
              case 40: // down arrow
                this.prev(); break;
              case 32: // space
              case 34: // page down
              case 38: // up arrow
              case 39: // right arrow
                this.next(); break;
              case 78: // N
                this.showNotes(); break;
              case 68: // D
                this.switch3D(); break;
              case 66: // B
              case 72: // H
                this.toggleHightlight(); break;
              case 84: // T
                this.changeTheme(); break;
            }
          },
          _touchStartX: 0,
          handleTouchStart: function(e) {
            this._touchStartX = e.touches[0].pageX;
          },
          handleTouchEnd: function(e) {
            var delta = this._touchStartX - e.changedTouches[0].pageX;
            var SWIPE_SIZE = 150;
            if (delta > SWIPE_SIZE) {
              this.next();
            } else if (delta< -SWIPE_SIZE) {
              this.prev();
            }
          },
        };
        
        // load highlight setting from session storage, if available.
        // session storage can only store strings so we have to assume type coercion
        // for the boolean logic here
        query('#prettify-link').disabled = !(sessionStorage['highlightOn'] == 'true');

        // disable style theme stylesheets
        var linkEls = queryAll('link.theme');
        var stylesheetPath = sessionStorage['theme'] || 'css/default.css';
        linkEls.forEach(function(stylesheet) {
          stylesheet.disabled = !(stylesheet.href.indexOf(stylesheetPath) != -1);
        });
        
        // Initialize
        var slideshow = new SlideShow(queryAll('.slide'));

        document.querySelector('#toggle-counter').addEventListener('click', toggleCounter, false);
        document.querySelector('#toggle-size').addEventListener('click', toggleSize, false);
        document.querySelector('#toggle-transitions').addEventListener('click', toggleTransitions, false);
        document.querySelector('#toggle-gradients').addEventListener('click', toggleGradients, false);

        var counters = document.querySelectorAll('.counter');
        var slides = document.querySelectorAll('.slide');

        // Default activate syntax Highlight
        var link = query('#prettify-link');
        link.disabled = false;
        sessionStorage['highlightOn'] = true;

        function toggleCounter() {
          toArray(counters).forEach(function(el) {
            el.style.display = (el.offsetHeight) ? 'none' : 'block';
          });
        }
        
        function toggleSize() {
          toArray(slides).forEach(function(el) {
            if (!/reduced/.test(el.className)) {
              addClass(el, 'reduced');
            }
            else {
              removeClass(el, 'reduced');
            }
          });
        }
 
        function toggleTransitions() {
          toArray(slides).forEach(function(el) {
            if (!/no-transitions/.test(el.className)) {
              addClass(el, 'no-transitions');
            }
            else {
              removeClass(el, 'no-transitions');
            }
          });
        }
        
        function toggleGradients() {
          toArray(slides).forEach(function(el) {
            if (!/no-gradients/.test(el.className)) {
              addClass(el, 'no-gradients');
            }
            else {
              removeClass(el, 'no-gradients');
            }
          });
        }

        document.addEventListener('DOMContentLoaded', function() {
          query('.slides').style.display = 'block';
        }, false);

        queryAll('pre').forEach(function(el) {
          addClass(el, 'prettyprint');
        });

      })();
    </script>


    <!--[if lt IE 9]>
    <script 
      src="http://ajax.googleapis.com/ajax/libs/chrome-frame/1/CFInstall.min.js">
    </script>
    <script>CFInstall.check({ mode: "overlay" });</script>
    <![endif]-->

    <!--
      Prettify lexer should work on a number of languages including C and
      friends, Java, Python, Bash, SQL, HTML, XML, CSS, Javascript, and
      Makefiles. It works passably on Ruby, PHP, VB, and Awk and a decent
      subset of Perl and Ruby.
      -->
    <script src="prettify/prettify.js" onload="prettyPrint();" defer></script>
    <!-- google-code-prettify: uncomment to add optional language support -->
    <!-- - AGC/AEA Assembly Language -->
    <!-- <script type='text/javascript' src='prettify/lang-apollo.js' ></script> -->
    <!-- - Cascading Style Sheets -->
    <!-- <script type='text/javascript' src='prettify/lang-css.js' ></script> -->
    <!-- - Haskell -->
    <!-- <script type='text/javascript' src='prettify/lang-hs.js' ></script> -->
    <!-- - Lisp -->
    <!-- <script type='text/javascript' src='prettify/lang-lisp.js' ></script> -->
    <!-- - Lua -->
    <!-- <script type='text/javascript' src='prettify/lang-lua.js' ></script> -->
    <!-- - OCaml, SML, F# and similar languages -->
    <!-- <script type='text/javascript' src='prettify/lang-ml.js' ></script> -->
    <!-- - Protocol Buffers -->
    <!-- <script type='text/javascript' src='prettify/lang-proto.js' ></script> -->
    <!-- - Scala -->
    <!-- <script type='text/javascript' src='prettify/lang-scala.js' ></script> -->
    <!-- - Structured Query Language -->
    <!-- <script type='text/javascript' src='prettify/lang-sql.js' ></script> -->
    <!-- - Visual Basic -->
    <!-- <script type='text/javascript' src='prettify/lang-vb.js' ></script> -->
    <!-- - VHDL '93 -->
    <!-- <script type='text/javascript' src='prettify/lang-vhdl.js' ></script> -->
    <!-- - Wiki pages -->
    <!-- <script type='text/javascript' src='prettify/lang-wiki.js' ></script> -->
    <!-- - YAML Ain't Markup Language -->
    <!-- <script type='text/javascript' src='prettify/lang-yaml.js' ></script> -->


    <script>
      // addEventListener('load', function(event){prettyPrint()}, false);
      addEventListener('load', function(event){document.querySelector('#toggle-size').click()}, false);        
    </script>
    
</body>
</html>
